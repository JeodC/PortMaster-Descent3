#!/bin/sh

GAMEDIR="$PWD"
CONFIG_FILE="$GAMEDIR/settings.json"
REGFILE="$GAMEDIR/config/.Descent3Registry"
LOGFILE="$GAMEDIR/log.txt"

# Ensure jq is available
if ! command -v jq >/dev/null 2>&1; then
  echo "jq is required but not installed. Exiting." | tee -a "$LOGFILE"
  exit 1
fi

# Define key mapping using simple space-separated strings
key_mapping_keys="ProceduralTextures Fog LightCoronas WeaponCoronas ObjectComplexity PowerupHalos ScorchMarks DynamicLighting ForceFeedback SimpleHeadlight Gamma TerrainDetail MipMapping ShaderType RenderDistance TextureQuality VSync BilinearFiltering GuidedMissileView MusicVolume MirrorSurfaces MineAutoleveling SoundQuality SoundQuantity SoundVolume SpecularMapping TerrainAutoleveling PXOLogin PXOPassword DirectIP"
key_mapping_values="DetailProcedurals DetailFog DetailCoronas DetailWeaponCoronas DetailObjectComp DetailPowerupHalos DetailScorchMarks Dynamic_Lighting EnableJoystickFF FastHeadlight RS_gamma RS_pixelerror RS_mipping RS_light RS_terraindist RS_texture_quality RS_vsync RS_bilear MissileView MUS_mastervol MirrorSurfaces RoomLeveling SoundQuality SoundQuantity SND_mastervol Specmapping TerrLeveling TrackerLogin TrackerPassword DirectIP"

key_types_strings="RS_gamma RS_terraindist SND_mastervol MUS_mastervol DirectIP TrackerLogin TrackerPassword RS_pixelerror Default_pilot DefaultNetConn BypassChat"
key_types_dwords="Dynamic_Lighting RS_vsync RS_bilear RS_mipping RS_light RS_texture_quality EnableJoystickFF SoundQuality SoundQuantity DetailObjectComp TerrLeveling RoomLeveling DetailScorchMarks DetailFog DetailCoronas DetailWeaponCoronas DetailProcedurals DetailPowerupHalos Specmapping MirrorSurfaces FastHeadlight MissileView RS_resolution RS_bitdepth RS_color_model VoicePowerup VoiceAll ForceFeedbackAutoCenter ForceFeedbackGain"
key_types_keys="$key_types_strings $key_types_dwords"

key_types_strings_values="string string string string string string string string string string string"
key_types_dwords_values="dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword dword"
key_types_values="$key_types_strings_values $key_types_dwords_values"


# Get corresponding value from key mapping
get_value_from_key() {
  local key="$1"
  local keys="$2"
  local values="$3"
  local i=1

  for k in $keys; do
    if [ "$k" = "$key" ]; then
      echo $values | cut -d' ' -f$i
      return
    fi
    i=$((i + 1))
  done
}

get_json_value() {
  local key_path="$1"
  local value
  echo "Querying JSON path: $key_path" >> "$LOGFILE"  # Log the query
  value=$(jq -r "$key_path" "$CONFIG_FILE" 2>>"$LOGFILE")

  if [ "$value" = "null" ]; then
    echo "jq returned null for path: $key_path" >> "$LOGFILE"  # Log if null
  fi

  echo "$value"
}

# Write or update registry key-value pair
write_registry() {
  local key="$1"
  local type="$2"
  local value="$3"

  # Handle different types of registry values
  case "$type" in
    string)
      # Replace the existing value if key is found, otherwise log it
      if grep -q "\"$key\"" "$REGFILE"; then
        sed -i "s/\"$key\"=.*$/\"$key\"=\"$value\"/" "$REGFILE"
      fi
      ;;
    dword)
      # Strip leading zeros
      value=$(echo "$value" | sed 's/^0*//')
      # Replace or log if the key is not found
      if grep -q "\"$key\"" "$REGFILE"; then
        sed -i "s/\"$key\"=dword:[0-9A-F]*$/\"$key\"=dword:$value/" "$REGFILE"
      fi
      ;;
  esac
}

# Main processing loop
for key in $key_mapping_keys; do
    # Construct the full JSON path without replacing underscores
    json_path="$key"  # Directly use the key as the path

    # Check if the key belongs to a specific section (e.g., Video, Audio, Detail, etc.)
    if [[ "$key" =~ ^(ObjectComplexity|TerrainDetail|TerrainAutoleveling|MineAutoleveling|ScorchMarks|Fog|LightCoronas|WeaponCoronas|ProceduralTextures|PowerupHalos|SpecularMapping|MirrorSurfaces)$ ]]; then
        json_path=".Detail.$json_path"
        echo "Matched Detail section for key: $key" >> "$LOGFILE"
    elif [[ "$key" =~ ^(PXOLogin|PXOPassword|DirectIP)$ ]]; then
        json_path=".Multiplayer.$json_path"
        echo "Matched Multiplayer section for key: $key" >> "$LOGFILE"
    elif [[ "$key" =~ ^(ForceFeedback|SimpleHeadlight|GuidedMissileView)$ ]]; then
        json_path=".Miscellaneous.$json_path"
        echo "Matched Miscellaneous section for key: $key" >> "$LOGFILE"
    elif [[ "$key" =~ ^(Gamma|RenderDistance|DynamicLighting|VSync|BilinearFiltering|MipMapping|ShaderType|TextureQuality)$ ]]; then
        json_path=".Video.$json_path"
        echo "Matched Video section for key: $key" >> "$LOGFILE"
    elif [[ "$key" =~ ^(SoundVolume|MusicVolume|SoundQuality|SoundQuantity)$ ]]; then
        json_path=".Audio.$json_path"
        echo "Matched Audio section for key: $key" >> "$LOGFILE"
    fi

    value=$(get_json_value "$json_path")
    
    # Handle the special case for TerrainDetail where the value is inverted
    if [ "$key" = "TerrainDetail" ] && [ -n "$value" ] && [ "$value" != "null" ]; then
        # Invert the TerrainDetail value (20 becomes 0, 19 becomes 1, etc.)
        value=$((20 - value))
        echo "Inverting TerrainDetail value: $value" >> "$LOGFILE"
    fi

    registry_key=$(get_value_from_key "$key" "$key_mapping_keys" "$key_mapping_values")
    if [ -n "$registry_key" ]; then
        registry_type=$(get_value_from_key "$registry_key" "$key_types_keys" "$key_types_values")
    fi

    # Check if value is valid and not null
    if [ -n "$value" ] && [ "$value" != "null" ]; then
        echo "Mapping key: $key to registry key: $registry_key, Type: $registry_type, Value: $value" >> "$LOGFILE"
        write_registry "$registry_key" "$registry_type" "$value"
    fi
done
